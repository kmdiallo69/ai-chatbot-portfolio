name: Azure Full Stack Deployment

on:
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: "1-410dbcf4-playground-sandbox"
  AZURE_LOCATION: "westus"
  ACR_NAME: "chatbotacr1752346001"
  CONTAINER_ENV_NAME: "chatbot-env-1752346023"
  DATABASE_APP_NAME: "chatbot-database"
  BACKEND_APP_NAME: "chatbot-backend"
  FRONTEND_APP_NAME: "chatbot-frontend"

jobs:
  build-and-deploy:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Full Stack
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          lfs: false

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install jq for JSON parsing
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      - name: Login to Azure Container Registry
        run: |
          az acr login --name ${{ env.ACR_NAME }}

      - name: Check Container Apps Environment
        run: |
          if ! az containerapp env show --name ${{ env.CONTAINER_ENV_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} &> /dev/null; then
            echo "Creating Container Apps environment..."
            az containerapp env create \
              --name ${{ env.CONTAINER_ENV_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --location ${{ env.AZURE_LOCATION }}
          else
            echo "Container Apps environment already exists"
          fi

      - name: Build and Push Database Image
        run: |
          cd database
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/chatbot-postgres:latest .
          docker push ${{ env.ACR_NAME }}.azurecr.io/chatbot-postgres:latest
          echo "Database image pushed successfully"

      - name: Deploy Database Container App
        run: |
          # Check if database container app exists
          if az containerapp show --name ${{ env.DATABASE_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} &> /dev/null; then
            echo "Updating existing database container app..."
            az containerapp update \
              --name ${{ env.DATABASE_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --image ${{ env.ACR_NAME }}.azurecr.io/chatbot-postgres:latest
          else
            echo "Creating new database container app..."
            az containerapp create \
              --name ${{ env.DATABASE_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --environment ${{ env.CONTAINER_ENV_NAME }} \
              --image ${{ env.ACR_NAME }}.azurecr.io/chatbot-postgres:latest \
              --target-port 5432 \
              --ingress external \
              --registry-server ${{ env.ACR_NAME }}.azurecr.io \
              --cpu 1 \
              --memory 2Gi \
              --min-replicas 1 \
              --max-replicas 1 \
              --env-vars \
                POSTGRES_DB=chatbot \
                POSTGRES_USER=postgres \
                POSTGRES_PASSWORD=password \
                POSTGRES_HOST_AUTH_METHOD=trust
          fi

      - name: Get Database URL
        id: get-database-url
        run: |
          DATABASE_FQDN=$(az containerapp show \
            --name ${{ env.DATABASE_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "properties.configuration.ingress.fqdn" \
            --output tsv)
          DATABASE_URL="postgresql://postgres:password@${DATABASE_FQDN}:5432/chatbot"
          echo "database_url=$DATABASE_URL" >> $GITHUB_OUTPUT
          echo "Database URL: $DATABASE_URL"

      - name: Build and Push Backend Image
        run: |
          cd Backend
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/chatbot-backend:latest -f Dockerfile.azure .
          docker push ${{ env.ACR_NAME }}.azurecr.io/chatbot-backend:latest
          echo "Backend image pushed successfully"

      - name: Deploy Backend Container App
        run: |
          # Check if backend container app exists
          if az containerapp show --name ${{ env.BACKEND_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} &> /dev/null; then
            echo "Updating existing backend container app..."
            az containerapp update \
              --name ${{ env.BACKEND_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --image ${{ env.ACR_NAME }}.azurecr.io/chatbot-backend:latest \
              --set-env-vars \
                OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
                DATABASE_URL="${{ steps.get-database-url.outputs.database_url }}" \
                ENVIRONMENT="production"
          else
            echo "Creating new backend container app..."
            az containerapp create \
              --name ${{ env.BACKEND_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --environment ${{ env.CONTAINER_ENV_NAME }} \
              --image ${{ env.ACR_NAME }}.azurecr.io/chatbot-backend:latest \
              --target-port 8000 \
              --ingress external \
              --registry-server ${{ env.ACR_NAME }}.azurecr.io \
              --min-replicas 1 \
              --max-replicas 3 \
              --cpu 0.5 \
              --memory 1Gi \
              --env-vars \
                OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
                DATABASE_URL="${{ steps.get-database-url.outputs.database_url }}" \
                ENVIRONMENT="production"
          fi

      - name: Get Backend URL
        id: get-backend-url
        run: |
          BACKEND_FQDN=$(az containerapp show \
            --name ${{ env.BACKEND_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "properties.configuration.ingress.fqdn" \
            --output tsv)
          BACKEND_URL="https://$BACKEND_FQDN"
          echo "backend_url=$BACKEND_URL" >> $GITHUB_OUTPUT
          echo "Backend URL: $BACKEND_URL"

      - name: Deploy Frontend to Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_BLUE_GRASS_012BC941E }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "Frontend"
          api_location: ""
          output_location: ""
        env:
          NEXT_PUBLIC_API_URL: ${{ steps.get-backend-url.outputs.backend_url }}

      - name: Update Backend CORS Settings
        run: |
          # Get frontend URL
          FRONTEND_URL="https://blue-grass-012bc941e.2.azurestaticapps.net"
          
          # Update backend CORS settings
          echo "Updating backend CORS settings for frontend: $FRONTEND_URL"
          az containerapp update \
            --name ${{ env.BACKEND_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --set-env-vars \
              OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
              DATABASE_URL="${{ steps.get-database-url.outputs.database_url }}" \
              ENVIRONMENT="production" \
              CORS_ORIGINS="$FRONTEND_URL"

      - name: Test Database Access
        run: |
          echo "üîç Testing Database Access..."
          echo "========================="
          
          # Get database connection details
          DATABASE_URL="${{ steps.get-database-url.outputs.database_url }}"
          BACKEND_URL="${{ steps.get-backend-url.outputs.backend_url }}"
          
          echo "Database URL: $DATABASE_URL"
          echo "Backend URL: $BACKEND_URL"
          
          # Wait for services to be ready
          echo "‚è≥ Waiting for services to initialize..."
          sleep 45
          
          # Test backend health
          echo "üîç Testing backend health..."
          for i in {1..15}; do
            if curl -f "$BACKEND_URL/health" &> /dev/null; then
              echo "‚úÖ Backend health check passed"
              break
            else
              echo "‚è≥ Waiting for backend to be ready... (attempt $i/15)"
              sleep 10
            fi
          done
          
          # Test database health through backend
          echo "üîç Testing database connection through backend..."
          for i in {1..10}; do
            DB_STATUS=$(curl -s "$BACKEND_URL/health/db" | jq -r '.status // "unknown"')
            if [ "$DB_STATUS" = "healthy" ]; then
              echo "‚úÖ Database connection test passed"
              break
            else
              echo "‚è≥ Waiting for database connection... (attempt $i/10)"
              echo "Database status: $DB_STATUS"
              sleep 15
            fi
          done
          
          # Test user registration endpoint (without creating user)
          echo "üîç Testing user registration endpoint..."
          REG_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST "$BACKEND_URL/auth/register" \
            -H "Content-Type: application/json" \
            -d '{}')
          
          if [ "$REG_STATUS" = "422" ]; then
            echo "‚úÖ Registration endpoint accessible (validation working)"
          else
            echo "‚ö†Ô∏è  Registration endpoint status: $REG_STATUS"
          fi
          
          # Test chat endpoint (should fail without auth)
          echo "üîç Testing chat endpoint authentication..."
          CHAT_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST "$BACKEND_URL/chat" \
            -H "Content-Type: application/json" \
            -d '{"message": "test"}')
          
          if [ "$CHAT_STATUS" = "401" ]; then
            echo "‚úÖ Chat endpoint properly protected (authentication working)"
          else
            echo "‚ö†Ô∏è  Chat endpoint status: $CHAT_STATUS"
          fi

      - name: Verify Frontend Deployment
        run: |
          echo "üîç Verifying Frontend Deployment..."
          echo "================================"
          
          FRONTEND_URL="https://blue-grass-012bc941e.2.azurestaticapps.net"
          BACKEND_URL="${{ steps.get-backend-url.outputs.backend_url }}"
          
          # Wait for frontend to be ready
          echo "‚è≥ Waiting for frontend to be ready..."
          sleep 30
          
          # Test frontend accessibility
          echo "üîç Testing frontend accessibility..."
          for i in {1..10}; do
            FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$FRONTEND_URL")
            if [ "$FRONTEND_STATUS" = "200" ]; then
              echo "‚úÖ Frontend is accessible"
              break
            else
              echo "‚è≥ Waiting for frontend... (attempt $i/10) - Status: $FRONTEND_STATUS"
              sleep 10
            fi
          done
          
          # Check if frontend can reach backend
          echo "üîç Testing frontend-backend connectivity..."
          echo "Expected backend URL in frontend: $BACKEND_URL"
          
          # Test CORS configuration
          echo "üîç Testing CORS configuration..."
          CORS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -X OPTIONS "$BACKEND_URL/health" \
            -H "Origin: $FRONTEND_URL" \
            -H "Access-Control-Request-Method: GET")
          
          if [ "$CORS_STATUS" = "200" ] || [ "$CORS_STATUS" = "204" ]; then
            echo "‚úÖ CORS configuration working"
          else
            echo "‚ö†Ô∏è  CORS status: $CORS_STATUS"
          fi

      - name: Display Deployment URLs
        run: |
          echo "üéâ Deployment Complete!"
          echo "========================="
          echo "üåê Frontend URL: https://blue-grass-012bc941e.2.azurestaticapps.net"
          echo "‚öôÔ∏è Backend URL: ${{ steps.get-backend-url.outputs.backend_url }}"
          echo "üóÑÔ∏è Database URL: ${{ steps.get-database-url.outputs.database_url }}"
          echo "üìä Resource Group: ${{ env.AZURE_RESOURCE_GROUP }}"
          echo "üèóÔ∏è Container Registry: ${{ env.ACR_NAME }}"
          echo ""
          echo "üîß All components are now deployed and configured to communicate!"
          echo ""
          echo "üìã Quick Test Instructions:"
          echo "1. Visit: https://blue-grass-012bc941e.2.azurestaticapps.net"
          echo "2. Register a new user account"
          echo "3. Check email for verification link"
          echo "4. Login and test the chat functionality"

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_BLUE_GRASS_012BC941E }}
          action: "close" 